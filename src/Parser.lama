-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun consBinop(l, op, r) {
  Binop (op, l, r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr ({
        [Left, {
          [s("!!"), consBinop]
        }],
        [Left, {
          [s("&&"), consBinop]
        }],
        [Nona, {
          [s("<"),  consBinop],
          [s(">"),  consBinop],
          [s("<="), consBinop],
          [s(">="), consBinop],
          [s("=="), consBinop],
          [s("!="), consBinop]
        }],
        [Left, {
          [s("+"),  consBinop],
          [s("-"),  consBinop]
        }],
        [Left, {
          [s("*"),  consBinop],
          [s("/"),  consBinop],
          [s("%"),  consBinop]
        }]}, primary);

var stmt = memo $ eta syntax (
        l=oneStmt s[";"] r=stmt {Seq (l, r)} |
        oneStmt),
      oneStmt = memo $ eta syntax (
        l=lident s[":="] r=exp                  {Assn (l, r)} |
        x=kSkip                                 {Skip}        |
        l=kRead  x=inbr[s("("), lident, s(")")] {Read (x)}    |
        l=kWrite x=inbr[s("("), exp,    s(")")] {Write (x)});
   

-- Public top-level parser
public parse = stmt;
             
