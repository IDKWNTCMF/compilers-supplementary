-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[s, st, w], insns) {
  case insns of
    {}      -> c
  | i : ins -> 
    case i of
      READ       -> case readWorld (w) of [x, w] -> eval ([x : s, st, w], ins) esac
    | WRITE      -> case s of x : s -> eval ([s, st, writeWorld (x, w)], ins) esac
    | BINOP (op) -> 
      case s of x : y : s -> 
        case op of
          "+"  -> eval ([(y +  x) : s, st, w], ins)
        | "-"  -> eval ([(y -  x) : s, st, w], ins)
        | "*"  -> eval ([(y *  x) : s, st, w], ins)
        | "/"  -> eval ([(y /  x) : s, st, w], ins)
        | "%"  -> eval ([(y %  x) : s, st, w], ins)
        | "<"  -> eval ([(y <  x) : s, st, w], ins)
        | ">"  -> eval ([(y >  x) : s, st, w], ins)
        | "<=" -> eval ([(y <= x) : s, st, w], ins)
        | ">=" -> eval ([(y >= x) : s, st, w], ins)
        | "==" -> eval ([(y == x) : s, st, w], ins)
        | "!=" -> eval ([(y != x) : s, st, w], ins)
        | "&&" -> eval ([(y && x) : s, st, w], ins)
        | "!!" -> eval ([(y !! x) : s, st, w], ins)
        esac
      esac
    | LD    (v)  -> eval ([st (v) : s, st, w], ins)
    | ST    (v)  -> case s of x : s -> eval ([s, st <- [v, x], w], ins) esac
    | CONST (x)  -> eval ([x : s, st, w], ins)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (v)                -> {LD (v)}
  | Const (x)                -> {CONST (x)}
  | Binop (op, expr1, expr2) -> compileExpr (expr1) +++ compileExpr (expr2) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (v, expr)      -> compileExpr (expr) +++ {ST (v)}
  | Seq   (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
  | Skip                 -> {}
  | Read  (v)            -> {READ, ST (v)}
  | Write (expr)         -> compileExpr (expr) +++ {WRITE}
  esac 
}
