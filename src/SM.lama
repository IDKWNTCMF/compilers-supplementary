-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[s, st, w], insns) {
  case insns of 
    {}            -> c
  | ins : insns ->
    case ins of 
      READ         -> 
      case readWorld (w) of
        [x, w]    ->     eval (env, [x : s, st, w],                 insns)
      esac
    | WRITE        ->
      case s of
        x : s     ->     eval (env, [s, st, writeWorld (x, w)],     insns)
      esac
    | BINOP (op)   -> 
      case s of
        x : y : s ->     eval (env, [evalOp (op, y, x) : s, st, w], insns)
      esac
    | LD    (x)    ->    eval (env, [st (x) : s, st, w],            insns)
    | LDA   (x)    ->    eval (env, [x : s, st, w],                 insns)
    | ST    (v)    ->
      case s of
        x : s     ->     eval (env, [s, st <- [v, x], w],           insns)
      esac
    | STI          ->
      case s of
        x : v : s ->     eval (env, [x : s, st <- [v, x], w],       insns)
      esac
    | CONST (n)    ->    eval (env, [n : s, st, w],                 insns)
    | LABEL (_)    ->    eval (env, c,                              insns)
    | JMP   (l)    ->    eval (env, c,                              fromLabel (env, l))
    | CJMP  (c, l) -> 
      case s of 
        x : s     -> 
          case [c, x] of
            ["z",  0] -> eval (env, [s, st, w],                     fromLabel (env, l))
          | ["nz", 0] -> eval (env, [s, st, w],                     insns)
          | ["z",  _] -> eval (env, [s, st, w],                     insns)
          | ["nz", _] -> eval (env, [s, st, w],                     fromLabel (env, l))
          esac
      esac
    | DUP          ->
      case s of
        x : s    ->      eval (env, [x : x : s, st, w],             insns)
      esac
    | DROP         ->
      case s of
        _ : s    ->      eval (env, [s, st, w],                     insns)
      esac
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Assn    (v, x)       -> 
      case env.genLabels (2) of
        [vLab, xLab, env] ->
          case compile (vLab, env, v) of
            [vLabUsed, env, vCode] ->
              case compile (xLab, env, x) of
                [xLabUsed, env, xCode] ->    [false,   env, vCode <+> label (vLab, vLabUsed) <+> xCode <+> label (xLab, xLabUsed) <+ STI]
              esac
          esac
      esac 
    | Seq     (s1, s2)     ->
      case env.genLabel of
        [s2Lab, env]   ->
            case compile (s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile (lab, env, s2) of
                  [labUsed, env, s2Code] ->  [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
      esac
    | Skip                 ->                [false,   env, emptyBuffer ()]
    | Read    (x)          ->                [false,   env, singletonBuffer (READ) <+ ST (x)]
    | Write   (e)          -> 
      case env.genLabel of
        [lab, env] ->
          case compile (lab, env, e) of
            [labUsed, env, code] ->          [false,   env, code <+> label (lab, labUsed) <+ WRITE]
          esac
      esac
    | If      (cond, t, f) ->
      case env.genLabels (3) of
        [condLab, tLab, fLab, env] ->
          case compile (condLab, env, cond) of
            [condLabUsed, env, condCode] ->
              case compile (tLab, env, t) of
                [tLabUsed, env, tCode] ->
                  case compile (lab, env, f) of
                    [labUsed, env, fCode] -> [true,    env, condCode <+> label (condLab, condLabUsed) <+ CJMP ("z", fLab) <+> tCode <+> label (tLab, tLabUsed) <+ JMP (lab) <+ LABEL (fLab) <+> fCode]
                  esac
              esac
          esac
      esac
    | While   (cond, body) ->
      case env.genLabels (3) of
        [lab, condLab, bodyLab, env] ->
          case compile (lab, env, cond) of
            [labUsed, env, condCode] -> 
              case compile (condLab, env, body) of
                [condLabUsed, env, bodyCode] ->  [false,   env, singletonBuffer (JMP (condLab)) <+ LABEL (bodyLab) <+> bodyCode <+ LABEL (condLab) <+> condCode <+> label (lab, labUsed) <+ CJMP ("nz", bodyLab)]
              esac
          esac
      esac
    | DoWhile (body, cond)    ->
      case env.genLabels (3) of
        [lab, condLab, bodyLab, env] ->
          case compile (lab, env, cond) of
            [labUsed, env, condCode] ->
              case compile (condLab, env, body) of
                [condLabUsed, env, bodyCode] ->  [false,   env, singletonBuffer (LABEL (bodyLab)) <+> bodyCode <+> label (condLab, condLabUsed) <+> condCode <+> label (lab, labUsed) <+ CJMP ("nz", bodyLab)]
              esac
          esac
      esac
    | Var     (x)          ->                [false,   env, singletonBuffer (LD (x))]
    | Ref     (x)          ->                [false,   env, singletonBuffer (LDA (x))]
    | Const   (n)          ->                [false,   env, singletonBuffer (CONST (n))]
    | Binop   (op, e1, e2) -> 
      case env.genLabels (2) of
        [e1Lab, e2Lab, env] ->
          case compile (e1Lab, env, e1) of
            [e1LabUsed, env, e1Code] ->
              case compile (e2Lab, env, e2) of
                [e2LabUsed, env, e2Code] ->  [false,   env, e1Code <+> label (e1Lab, e1LabUsed) <+> e2Code <+> label (e2Lab, e2LabUsed) <+ BINOP (op)]
              esac
          esac
      esac
    | Ignore  (e)          ->
      case env.genLabel of
        [lab, env] ->
          case compile (lab, env, e) of
            [labUsed, env, code] ->          [false,   env, code <+> label (lab, labUsed) <+ DROP]
          esac
      esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
