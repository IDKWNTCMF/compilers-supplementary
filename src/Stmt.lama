-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[st, w], stmt) {
  case stmt of
    Assn  (v,     expr)  -> [st <- [v, evalExpr (st, expr)], w]
  | Seq   (stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)
  | Skip                 -> c
  | Read  (v)            -> 
      case readWorld (w) of 
        [x, w] -> [st <- [v, x], w] 
      esac
  | Write (expr)         -> [st, writeWorld (evalExpr (st, expr), w)]
  | If    (expr, t, f)   -> 
      case evalExpr (st, expr) of 
        1 -> eval (c, t)
      | 0 -> eval (c, f)
      esac
  | While (expr, body)   -> 
      case evalExpr (st, expr) of
        1 -> eval (eval (c, body), stmt)
      | 0 -> c
      esac
  | DoWhile (body, expr) -> 
      case eval (c, body) of 
        [st, w] -> 
          case evalExpr (st, expr) of
            1 -> eval ([st, w], stmt)
          | 0 -> [st, w]
          esac
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
